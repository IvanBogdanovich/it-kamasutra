{"ast":null,"code":"// api\nimport { authMeAPI, securityAPI } from './api'; // actions\n\nimport { stopSubmit } from 'redux-form'; // types\n\nimport types from './types';\nexport function setAuthUserData(login, email, userId, isAuth) {\n  return {\n    type: types.SET_AUTH_DATA_USER,\n    data: {\n      login,\n      email,\n      userId,\n      isAuth\n    }\n  };\n}\nexport function getCaptchaSuccess(captcha) {\n  return {\n    type: types.GET_CAPTCHA_SUCCESS,\n    data: {\n      captcha\n    }\n  };\n}\nexport function getMeThunk() {\n  return async dispatch => {\n    try {\n      const response = await authMeAPI.getAuthMe();\n\n      if (response.resultCode === 0) {\n        const {\n          login,\n          email,\n          id\n        } = response.data;\n        dispatch(setAuthUserData(login, email, id, true));\n      }\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n}\nexport function loginThunk(email, password, rememberMe, captcha) {\n  return async dispatch => {\n    try {\n      const response = await authMeAPI.login(email, password, rememberMe, captcha);\n\n      if (response.resultCode === 0) {\n        dispatch(getMeThunk());\n      } else if (response.resultCode === 10) {\n        dispatch(getCaptchaThunk());\n      } else {\n        const message = response.messages;\n        dispatch(stopSubmit('formLogin', {\n          _error: message ? message : 'some wrong'\n        }));\n      }\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n}\nexport function loginOutThunk() {\n  return async dispatch => {\n    try {\n      const response = await authMeAPI.loginOut();\n\n      if (response.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n      }\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n}\nexport function getCaptchaThunk() {\n  return async dispatch => {\n    try {\n      const response = await securityAPI.getCaptcha();\n      const captchaUrl = response.url;\n      dispatch(getCaptchaSuccess(captchaUrl));\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/a17092425/Desktop/pet/it-kamasutra/src/state/auth/actions.js"],"names":["authMeAPI","securityAPI","stopSubmit","types","setAuthUserData","login","email","userId","isAuth","type","SET_AUTH_DATA_USER","data","getCaptchaSuccess","captcha","GET_CAPTCHA_SUCCESS","getMeThunk","dispatch","response","getAuthMe","resultCode","id","e","Error","loginThunk","password","rememberMe","getCaptchaThunk","message","messages","_error","loginOutThunk","loginOut","getCaptcha","captchaUrl","url"],"mappings":"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","sourcesContent":["// api\nimport { authMeAPI, securityAPI } from './api';\n\n// actions\nimport { stopSubmit } from 'redux-form';\n\n// types\nimport types from './types';\n\nexport function setAuthUserData(login, email, userId, isAuth) {\n    return {\n        type: types.SET_AUTH_DATA_USER,\n        data: {\n            login,\n            email,\n            userId,\n            isAuth\n        }\n    }\n}\n\nexport function getCaptchaSuccess(captcha) {\n    return {\n        type: types.GET_CAPTCHA_SUCCESS,\n        data: {\n            captcha\n        }\n    }\n}\n\nexport function getMeThunk() {\n    return async dispatch => {\n        try {\n            const response = await authMeAPI.getAuthMe();\n            if (response.resultCode === 0) {\n                const { login, email, id, } = response.data;\n                dispatch(setAuthUserData(login, email, id, true));\n            }\n        }\n        catch(e) {\n            throw new Error(e);\n        }\n    }\n}\n\nexport function loginThunk(email, password, rememberMe, captcha) {\n    return async dispatch => {\n        try {\n            const response = await authMeAPI.login(email, password, rememberMe, captcha);\n            if (response.resultCode === 0) {\n                dispatch(getMeThunk());\n            } else if (response.resultCode === 10) {\n                dispatch(getCaptchaThunk());\n            }\n            else {\n                const message = response.messages\n                dispatch(stopSubmit('formLogin', {_error: message ? message : 'some wrong' }));\n            }\n        }\n        catch(e) {\n            throw new Error(e);\n        }\n    }\n}\n\nexport function loginOutThunk() {\n    return async dispatch => {\n        try {\n            const response = await authMeAPI.loginOut();\n            if (response.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null, false));\n            }\n        }\n        catch(e) {\n            throw new Error(e);\n        }\n    }\n}\n\nexport function getCaptchaThunk() {\n    return async dispatch => {\n        try {\n            const response = await securityAPI.getCaptcha();\n            const captchaUrl = response.url;\n            dispatch(getCaptchaSuccess(captchaUrl));\n        }\n        catch(e) {\n            throw new Error(e);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}