{"ast":null,"code":"import types from './types';\nimport { getMeThunk } from '../../redux/auth-reducer';\nimport { initializedSuccess } from './actions'; // initial state\n\nconst initialState = {\n  initialized: false\n}; // reducer\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case types.INITIALIZED_SUCCESS:\n      {\n        return { ...state,\n          initialized: true\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport const getInitializeThunk = () => {\n  return dispatch => {\n    let promise = dispatch(getMeThunk());\n    promise.then(() => {\n      dispatch(initializedSuccess());\n    });\n  };\n};","map":{"version":3,"sources":["/Users/a17092425/Desktop/pet/it-kamasutra/src/state/app/index.js"],"names":["types","getMeThunk","initializedSuccess","initialState","initialized","reducer","state","action","type","INITIALIZED_SUCCESS","getInitializeThunk","dispatch","promise","then"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,kBAAT,QAAmC,WAAnC,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE;AADI,CAArB,C,CAIA;;AACA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGH,YAAzB,EAAuCI,MAAvC,EAA+C;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,KAAK,CAACS,mBAAX;AAAgC;AAC5B,eAAO,EACH,GAAGH,KADA;AAEHF,UAAAA,WAAW,EAAE;AAFV,SAAP;AAIH;;AACD;AAAS;AACL,eAAOE,KAAP;AACH;AATL;AAWH;AAED,OAAO,MAAMI,kBAAkB,GAAG,MAAM;AACpC,SAAQC,QAAD,IAAc;AACjB,QAAIC,OAAO,GAAGD,QAAQ,CAACV,UAAU,EAAX,CAAtB;AACAW,IAAAA,OAAO,CAACC,IAAR,CAAa,MAAM;AAChBF,MAAAA,QAAQ,CAACT,kBAAkB,EAAnB,CAAR;AACF,KAFD;AAGH,GALD;AAMH,CAPM","sourcesContent":["import types from './types';\nimport { getMeThunk } from '../../redux/auth-reducer';\nimport { initializedSuccess } from './actions';\n\n// initial state\nconst initialState = {\n    initialized: false,\n}\n\n// reducer\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case types.INITIALIZED_SUCCESS: {\n            return {\n                ...state,\n                initialized: true\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const getInitializeThunk = () => {\n    return (dispatch) => {\n        let promise = dispatch(getMeThunk())\n        promise.then(() => {\n           dispatch(initializedSuccess())\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}