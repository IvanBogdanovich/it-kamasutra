{"ast":null,"code":"// api\nimport { authMeAPI, securityAPI } from './api'; // actions\n\nimport { stopSubmit } from 'redux-form'; // types\n\nimport types from './types';\nexport function setAuthUserData(login, email, userId, isAuth) {\n  return {\n    type: types.SET_AUTH_DATA_USER,\n    data: {\n      login,\n      email,\n      userId,\n      isAuth\n    }\n  };\n}\nexport function getCaptchaSuccess(captcha) {\n  return {\n    type: types.GET_CAPTCHA_SUCCESS,\n    data: {\n      captcha\n    }\n  };\n}\nexport function getMeThunk() {\n  return dispatch => {\n    return authMeAPI.getAuthMe().then(data => {\n      if (data.resultCode === 0) {\n        const {\n          login,\n          email,\n          id\n        } = data.data;\n        dispatch(setAuthUserData(login, email, id, true));\n      }\n    });\n  };\n}\nexport function loginThunk(email, password, rememberMe, captcha) {\n  return dispatch => {\n    authMeAPI.login(email, password, rememberMe, captcha).then(data => {\n      if (data.resultCode === 0) {\n        dispatch(getMeThunk());\n      } else if (data.resultCode === 10) {\n        dispatch(getCaptchaThunk());\n      } else {\n        const message = data.messages;\n        dispatch(stopSubmit('formLogin', {\n          _error: message ? message : 'some wrong'\n        }));\n      }\n    });\n  };\n}\nexport function loginOutThunk() {\n  return dispatch => {\n    authMeAPI.loginOut().then(data => {\n      if (data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n      }\n    });\n  };\n}\nexport function getCaptchaThunk() {\n  return dispatch => {\n    securityAPI.getCaptcha().then(data => {\n      dispatch(getCaptchaSuccess(data.url));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/a17092425/Desktop/pet/it-kamasutra/src/state/auth/actions.js"],"names":["authMeAPI","securityAPI","stopSubmit","types","setAuthUserData","login","email","userId","isAuth","type","SET_AUTH_DATA_USER","data","getCaptchaSuccess","captcha","GET_CAPTCHA_SUCCESS","getMeThunk","dispatch","getAuthMe","then","resultCode","id","loginThunk","password","rememberMe","getCaptchaThunk","message","messages","_error","loginOutThunk","loginOut","getCaptcha","url"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,OAAvC,C,CAEA;;AACA,SAASC,UAAT,QAA2B,YAA3B,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,KAAhC,EAAuCC,MAAvC,EAA+CC,MAA/C,EAAuD;AAC1D,SAAO;AACHC,IAAAA,IAAI,EAAEN,KAAK,CAACO,kBADT;AAEHC,IAAAA,IAAI,EAAE;AACFN,MAAAA,KADE;AAEFC,MAAAA,KAFE;AAGFC,MAAAA,MAHE;AAIFC,MAAAA;AAJE;AAFH,GAAP;AASH;AAED,OAAO,SAASI,iBAAT,CAA2BC,OAA3B,EAAoC;AACvC,SAAO;AACHJ,IAAAA,IAAI,EAAEN,KAAK,CAACW,mBADT;AAEHH,IAAAA,IAAI,EAAE;AACFE,MAAAA;AADE;AAFH,GAAP;AAMH;AAED,OAAO,SAASE,UAAT,GAAsB;AACzB,SAAQC,QAAD,IAAc;AACjB,WAAOhB,SAAS,CAACiB,SAAV,GAAsBC,IAAtB,CAA2BP,IAAI,IAAI;AACtC,UAAIA,IAAI,CAACQ,UAAL,KAAoB,CAAxB,EAA2B;AACvB,cAAM;AAAEd,UAAAA,KAAF;AAASC,UAAAA,KAAT;AAAgBc,UAAAA;AAAhB,YAAwBT,IAAI,CAACA,IAAnC;AACAK,QAAAA,QAAQ,CAACZ,eAAe,CAACC,KAAD,EAAQC,KAAR,EAAec,EAAf,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,KALM,CAAP;AAMH,GAPD;AAQH;AAED,OAAO,SAASC,UAAT,CAAoBf,KAApB,EAA2BgB,QAA3B,EAAqCC,UAArC,EAAiDV,OAAjD,EAA0D;AAC7D,SAAQG,QAAD,IAAc;AACjBhB,IAAAA,SAAS,CAACK,KAAV,CAAgBC,KAAhB,EAAuBgB,QAAvB,EAAiCC,UAAjC,EAA6CV,OAA7C,EAAsDK,IAAtD,CAA2DP,IAAI,IAAI;AAC/D,UAAIA,IAAI,CAACQ,UAAL,KAAoB,CAAxB,EAA2B;AACvBH,QAAAA,QAAQ,CAACD,UAAU,EAAX,CAAR;AACH,OAFD,MAEO,IAAIJ,IAAI,CAACQ,UAAL,KAAoB,EAAxB,EAA4B;AAC/BH,QAAAA,QAAQ,CAACQ,eAAe,EAAhB,CAAR;AACH,OAFM,MAGF;AACD,cAAMC,OAAO,GAAGd,IAAI,CAACe,QAArB;AACAV,QAAAA,QAAQ,CAACd,UAAU,CAAC,WAAD,EAAc;AAACyB,UAAAA,MAAM,EAAEF,OAAO,GAAGA,OAAH,GAAa;AAA7B,SAAd,CAAX,CAAR;AACH;AACJ,KAVD;AAWH,GAZD;AAaH;AAED,OAAO,SAASG,aAAT,GAAyB;AAC5B,SAAQZ,QAAD,IAAc;AACjBhB,IAAAA,SAAS,CAAC6B,QAAV,GAAqBX,IAArB,CAA0BP,IAAI,IAAI;AAC9B,UAAIA,IAAI,CAACQ,UAAL,KAAoB,CAAxB,EAA2B;AACvBH,QAAAA,QAAQ,CAACZ,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,KAJD;AAKH,GAND;AAOH;AAED,OAAO,SAASoB,eAAT,GAA2B;AAC9B,SAAQR,QAAD,IAAc;AACjBf,IAAAA,WAAW,CAAC6B,UAAZ,GAAyBZ,IAAzB,CAA8BP,IAAI,IAAI;AAClCK,MAAAA,QAAQ,CAACJ,iBAAiB,CAACD,IAAI,CAACoB,GAAN,CAAlB,CAAR;AACH,KAFD;AAGH,GAJD;AAKH","sourcesContent":["// api\nimport { authMeAPI, securityAPI } from './api';\n\n// actions\nimport { stopSubmit } from 'redux-form';\n\n// types\nimport types from './types';\n\nexport function setAuthUserData(login, email, userId, isAuth) {\n    return {\n        type: types.SET_AUTH_DATA_USER,\n        data: {\n            login,\n            email,\n            userId,\n            isAuth\n        }\n    }\n}\n\nexport function getCaptchaSuccess(captcha) {\n    return {\n        type: types.GET_CAPTCHA_SUCCESS,\n        data: {\n            captcha\n        }\n    }\n}\n\nexport function getMeThunk() {\n    return (dispatch) => {\n        return authMeAPI.getAuthMe().then(data => {\n            if (data.resultCode === 0) {\n                const { login, email, id, } = data.data;\n                dispatch(setAuthUserData(login, email, id, true));\n            }\n        })\n    }\n}\n\nexport function loginThunk(email, password, rememberMe, captcha) {\n    return (dispatch) => {\n        authMeAPI.login(email, password, rememberMe, captcha).then(data => {\n            if (data.resultCode === 0) {\n                dispatch(getMeThunk());\n            } else if (data.resultCode === 10) {\n                dispatch(getCaptchaThunk());\n            }\n            else {\n                const message = data.messages\n                dispatch(stopSubmit('formLogin', {_error: message ? message : 'some wrong' }));\n            }\n        })\n    }\n}\n\nexport function loginOutThunk() {\n    return (dispatch) => {\n        authMeAPI.loginOut().then(data => {\n            if (data.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null, false));\n            }\n        })\n    }\n}\n\nexport function getCaptchaThunk() {\n    return (dispatch) => {\n        securityAPI.getCaptcha().then(data => {\n            dispatch(getCaptchaSuccess(data.url));\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}