{"ast":null,"code":"import { authMeAPI } from '../api/api';\nimport { stopSubmit } from 'redux-form';\nconst SET_AUTH_DATA_USER = 'SET-AUTH-DATA-USER';\nconst initialState = {\n  login: null,\n  email: null,\n  userId: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_DATA_USER:\n      {\n        return { ...state,\n          ...action.data\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default authReducer;\nexport const setAuthUserData = (login, email, userId, isAuth) => {\n  return {\n    type: SET_AUTH_DATA_USER,\n    data: {\n      login,\n      email,\n      userId,\n      isAuth\n    }\n  };\n};\nexport const getMeThunk = () => {\n  return dispatch => {\n    return authMeAPI.getAuthMe().then(data => {\n      if (data.resultCode === 0) {\n        const {\n          login,\n          email,\n          id\n        } = data.data;\n        dispatch(setAuthUserData(login, email, id, true));\n      }\n    });\n  };\n};\nexport const loginThunk = (email, password, rememberMe) => {\n  return dispatch => {\n    authMeAPI.login(email, password, rememberMe).then(data => {\n      if (data.resultCode === 0) {\n        dispatch(getMeThunk());\n      } else {\n        const message = data.messages;\n        dispatch(stopSubmit('formLogin', {\n          _error: message ? message : 'some wrong'\n        }));\n      }\n    });\n  };\n};\nexport const loginOutThunk = () => {\n  return dispatch => {\n    authMeAPI.loginOut().then(data => {\n      if (data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/a17092425/Desktop/pet/it-kamasutra/src/redux/auth-reducer.js"],"names":["authMeAPI","stopSubmit","SET_AUTH_DATA_USER","initialState","login","email","userId","isAuth","authReducer","state","action","type","data","setAuthUserData","getMeThunk","dispatch","getAuthMe","then","resultCode","id","loginThunk","password","rememberMe","message","messages","_error","loginOutThunk","loginOut"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,kBAAkB,GAAG,oBAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,IADU;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,MAAM,EAAE,IAHS;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,kBAAL;AAAyB;AACrB,eAAO,EACH,GAAGO,KADA;AAEH,aAAGC,MAAM,CAACE;AAFP,SAAP;AAIH;;AACD;AAAS;AACL,eAAOH,KAAP;AACH;AATL;AAWH,CAZD;;AAcA,eAAeD,WAAf;AAEA,OAAO,MAAMK,eAAe,GAAG,CAACT,KAAD,EAAQC,KAAR,EAAeC,MAAf,EAAuBC,MAAvB,KAAkC;AAC7D,SAAO;AACHI,IAAAA,IAAI,EAAET,kBADH;AAEHU,IAAAA,IAAI,EAAE;AACFR,MAAAA,KADE;AAEFC,MAAAA,KAFE;AAGFC,MAAAA,MAHE;AAIFC,MAAAA;AAJE;AAFH,GAAP;AASH,CAVM;AAYP,OAAO,MAAMO,UAAU,GAAG,MAAM;AAC5B,SAAQC,QAAD,IAAc;AACjB,WAAOf,SAAS,CAACgB,SAAV,GAAsBC,IAAtB,CAA2BL,IAAI,IAAI;AACtC,UAAIA,IAAI,CAACM,UAAL,KAAoB,CAAxB,EAA2B;AACvB,cAAM;AAAEd,UAAAA,KAAF;AAASC,UAAAA,KAAT;AAAgBc,UAAAA;AAAhB,YAAwBP,IAAI,CAACA,IAAnC;AACAG,QAAAA,QAAQ,CAACF,eAAe,CAACT,KAAD,EAAQC,KAAR,EAAec,EAAf,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,KALM,CAAP;AAMH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMC,UAAU,GAAG,CAACf,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAiC;AACvD,SAAQP,QAAD,IAAc;AACjBf,IAAAA,SAAS,CAACI,KAAV,CAAgBC,KAAhB,EAAuBgB,QAAvB,EAAiCC,UAAjC,EAA6CL,IAA7C,CAAkDL,IAAI,IAAI;AACtD,UAAIA,IAAI,CAACM,UAAL,KAAoB,CAAxB,EAA2B;AACvBH,QAAAA,QAAQ,CAACD,UAAU,EAAX,CAAR;AACH,OAFD,MAEO;AACH,cAAMS,OAAO,GAAGX,IAAI,CAACY,QAArB;AACAT,QAAAA,QAAQ,CAACd,UAAU,CAAC,WAAD,EAAc;AAACwB,UAAAA,MAAM,EAAEF,OAAO,GAAGA,OAAH,GAAa;AAA7B,SAAd,CAAX,CAAR;AACH;AACJ,KAPD;AAQH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMG,aAAa,GAAG,MAAM;AAC/B,SAAQX,QAAD,IAAc;AACjBf,IAAAA,SAAS,CAAC2B,QAAV,GAAqBV,IAArB,CAA0BL,IAAI,IAAI;AAC9B,UAAIA,IAAI,CAACM,UAAL,KAAoB,CAAxB,EAA2B;AACvBH,QAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,KAJD;AAKH,GAND;AAOH,CARM","sourcesContent":["import { authMeAPI } from '../api/api';\nimport { stopSubmit } from 'redux-form';\n\nconst SET_AUTH_DATA_USER = 'SET-AUTH-DATA-USER';\n\nconst initialState = {\n    login: null,\n    email: null,\n    userId: null,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_AUTH_DATA_USER: {\n            return {\n                ...state,\n                ...action.data\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport default authReducer;\n\nexport const setAuthUserData = (login, email, userId, isAuth) => {\n    return {\n        type: SET_AUTH_DATA_USER,\n        data: {\n            login,\n            email,\n            userId,\n            isAuth\n        }\n    }\n}\n\nexport const getMeThunk = () => {\n    return (dispatch) => {\n        return authMeAPI.getAuthMe().then(data => {\n            if (data.resultCode === 0) {\n                const { login, email, id, } = data.data;\n                dispatch(setAuthUserData(login, email, id, true));\n            }\n        })\n    }\n}\n\nexport const loginThunk = (email, password, rememberMe) => {\n    return (dispatch) => {\n        authMeAPI.login(email, password, rememberMe).then(data => {\n            if (data.resultCode === 0) {\n                dispatch(getMeThunk());\n            } else {\n                const message = data.messages\n                dispatch(stopSubmit('formLogin', {_error: message ? message : 'some wrong' }));\n            }\n        })\n    }\n}\n\nexport const loginOutThunk = () => {\n    return (dispatch) => {\n        authMeAPI.loginOut().then(data => {\n            if (data.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null, false));\n            }\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}