{"ast":null,"code":"// api\nimport { authMeAPI, securityAPI } from './api'; // actions\n\nimport { stopSubmit } from 'redux-form'; // types\n\nimport types from './types';\nexport function setAuthUserData(login, email, userId, isAuth) {\n  return {\n    type: types.SET_AUTH_DATA_USER,\n    data: {\n      login,\n      email,\n      userId,\n      isAuth\n    }\n  };\n}\nexport function getCaptchaSuccess(captcha) {\n  return {\n    type: types.GET_CAPTCHA_SUCCESS,\n    data: {\n      captcha\n    }\n  };\n}\nexport function getMeThunk() {\n  return async dispatch => {\n    const response = await authMeAPI.getAuthMe();\n    console.log('response getMeThunk', response);\n\n    if (response.resultCode === 0) {\n      const {\n        login,\n        email,\n        id\n      } = response.data;\n      dispatch(setAuthUserData(login, email, id, true));\n    }\n  };\n}\nexport function loginThunk(email, password, rememberMe, captcha) {\n  return async dispatch => {\n    const response = await authMeAPI.login(email, password, rememberMe, captcha);\n\n    if (response.resultCode === 0) {\n      dispatch(getMeThunk());\n    } else if (response.data.resultCode === 10) {\n      dispatch(getCaptchaThunk());\n    } else {\n      const message = response.messages;\n      console.log('response loginThunk', response);\n      dispatch(stopSubmit('formLogin', {\n        _error: message ? message : 'some wrong'\n      }));\n    }\n  };\n}\nexport function loginOutThunk() {\n  return async dispatch => {\n    const response = await authMeAPI.loginOut();\n\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  };\n}\nexport function getCaptchaThunk() {\n  return async dispatch => {\n    const response = await securityAPI.getCaptcha();\n    const captchaUrl = response.data.url;\n    dispatch(getCaptchaSuccess(captchaUrl));\n  };\n}","map":{"version":3,"sources":["/Users/a17092425/Desktop/pet/it-kamasutra/src/state/auth/actions.js"],"names":["authMeAPI","securityAPI","stopSubmit","types","setAuthUserData","login","email","userId","isAuth","type","SET_AUTH_DATA_USER","data","getCaptchaSuccess","captcha","GET_CAPTCHA_SUCCESS","getMeThunk","dispatch","response","getAuthMe","console","log","resultCode","id","loginThunk","password","rememberMe","getCaptchaThunk","message","messages","_error","loginOutThunk","loginOut","getCaptcha","captchaUrl","url"],"mappings":"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","sourcesContent":["// api\nimport { authMeAPI, securityAPI } from './api';\n\n// actions\nimport { stopSubmit } from 'redux-form';\n\n// types\nimport types from './types';\n\nexport function setAuthUserData(login, email, userId, isAuth) {\n    return {\n        type: types.SET_AUTH_DATA_USER,\n        data: {\n            login,\n            email,\n            userId,\n            isAuth\n        }\n    }\n}\n\nexport function getCaptchaSuccess(captcha) {\n    return {\n        type: types.GET_CAPTCHA_SUCCESS,\n        data: {\n            captcha\n        }\n    }\n}\n\nexport function getMeThunk() {\n    return async dispatch => {\n        const response = await authMeAPI.getAuthMe();\n        console.log('response getMeThunk', response);\n        if (response.resultCode === 0) {\n            const { login, email, id, } = response.data;\n            dispatch(setAuthUserData(login, email, id, true));\n        }\n    }\n}\n\nexport function loginThunk(email, password, rememberMe, captcha) {\n    return async dispatch => {\n        const response = await authMeAPI.login(email, password, rememberMe, captcha);\n        if (response.resultCode === 0) {\n            dispatch(getMeThunk());\n        } else if (response.data.resultCode === 10) {\n            dispatch(getCaptchaThunk());\n        }\n        else {\n            const message = response.messages\n            console.log('response loginThunk', response);\n            dispatch(stopSubmit('formLogin', {_error: message ? message : 'some wrong' }));\n        }\n    }\n}\n\nexport function loginOutThunk() {\n    return async dispatch => {\n        const response = await authMeAPI.loginOut();\n        if (response.data.resultCode === 0) {\n            dispatch(setAuthUserData(null, null, null, false));\n        }\n    }\n}\n\nexport function getCaptchaThunk() {\n    return async dispatch => {\n        const response = await securityAPI.getCaptcha();\n        const captchaUrl = response.data.url;\n        dispatch(getCaptchaSuccess(captchaUrl));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}