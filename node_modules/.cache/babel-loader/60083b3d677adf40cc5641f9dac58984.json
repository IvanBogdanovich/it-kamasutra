{"ast":null,"code":"import { usersAPI, profileAPI } from '../api/api';\nconst ADD_MESSAGE_PROFILE = 'ADD-MESSAGE-PROFILE';\nconst SET_PROFILE_USER = 'SET-PROFILE-USER';\nconst SET_STATUS = 'SET-STATUS';\nconst initialState = {\n  postData: [{\n    desc: 'Yo Yo mushiki',\n    likesCounter: 23\n  }, {\n    desc: 'It\\'s second first',\n    likesCounter: 5\n  }],\n  profile: null,\n  status: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_MESSAGE_PROFILE:\n      {\n        return { ...state,\n          postData: [...state.postData, {\n            desc: action.message,\n            likesCounter: 12\n          }]\n        };\n      }\n\n    case SET_PROFILE_USER:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case SET_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default profileReducer;\nexport const addMessage = message => {\n  return {\n    type: ADD_MESSAGE_PROFILE,\n    message: message\n  };\n};\nexport const setProfileUser = profile => {\n  return {\n    type: SET_PROFILE_USER,\n    profile\n  };\n};\nexport const setStatus = status => {\n  return {\n    type: SET_STATUS,\n    status\n  };\n};\nexport const getProfileThunk = userId => {\n  return dispatch => {\n    usersAPI.getProfile(userId).then(data => {\n      dispatch(setProfileUser(data));\n    });\n  };\n};\nexport const getUserStatusThunk = userId => {\n  return dispatch => {\n    profileAPI.getUserStatus(userId).then(response => {\n      dispatch(setStatus(response.data));\n    });\n  };\n};\nexport const updateStatusThunk = status => {\n  return dispatch => {\n    profileAPI.updateStatus(status).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setStatus(status));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/a17092425/Desktop/pet/it-kamasutra/src/redux/profile-reducer.js"],"names":["usersAPI","profileAPI","ADD_MESSAGE_PROFILE","SET_PROFILE_USER","SET_STATUS","initialState","postData","desc","likesCounter","profile","status","profileReducer","state","action","type","message","addMessage","setProfileUser","setStatus","getProfileThunk","userId","dispatch","getProfile","then","data","getUserStatusThunk","getUserStatus","response","updateStatusThunk","updateStatus","resultCode"],"mappings":"AACA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,YAArC;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,UAAU,GAAG,YAAnB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,CACN;AAAEC,IAAAA,IAAI,EAAE,eAAR;AAAyBC,IAAAA,YAAY,EAAE;AAAvC,GADM,EAEN;AAAED,IAAAA,IAAI,EAAE,oBAAR;AAA8BC,IAAAA,YAAY,EAAE;AAA5C,GAFM,CADO;AAKjBC,EAAAA,OAAO,EAAE,IALQ;AAMjBC,EAAAA,MAAM,EAAE;AANS,CAArB;;AASA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKZ,mBAAL;AAA0B;AACtB,eAAO,EACH,GAAGU,KADA;AAEHN,UAAAA,QAAQ,EAAE,CAAC,GAAGM,KAAK,CAACN,QAAV,EAAoB;AAAEC,YAAAA,IAAI,EAAEM,MAAM,CAACE,OAAf;AAAwBP,YAAAA,YAAY,EAAE;AAAtC,WAApB;AAFP,SAAP;AAIH;;AAED,SAAKL,gBAAL;AAAuB;AACnB,eAAO,EACH,GAAGS,KADA;AAEHH,UAAAA,OAAO,EAAEI,MAAM,CAACJ;AAFb,SAAP;AAIH;;AAED,SAAKL,UAAL;AAAiB;AACb,eAAO,EACH,GAAGQ,KADA;AAEHF,UAAAA,MAAM,EAAEG,MAAM,CAACH;AAFZ,SAAP;AAIH;;AAED;AACI,aAAOE,KAAP;AAxBR;AA0BH,CA3BD;;AA6BA,eAAeD,cAAf;AAEA,OAAO,MAAMK,UAAU,GAAID,OAAD,IAAa;AACnC,SAAO;AACHD,IAAAA,IAAI,EAAEZ,mBADH;AAEHa,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,cAAc,GAAIR,OAAD,IAAa;AACvC,SAAO;AACHK,IAAAA,IAAI,EAAEX,gBADH;AAEHM,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAMS,SAAS,GAAIR,MAAD,IAAY;AACjC,SAAO;AACHI,IAAAA,IAAI,EAAEV,UADH;AAEHM,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAMS,eAAe,GAAIC,MAAD,IAAY;AACvC,SAAQC,QAAD,IAAc;AACjBrB,IAAAA,QAAQ,CAACsB,UAAT,CAAoBF,MAApB,EACKG,IADL,CACUC,IAAI,IAAI;AACVH,MAAAA,QAAQ,CAACJ,cAAc,CAACO,IAAD,CAAf,CAAR;AACH,KAHL;AAIH,GALD;AAMH,CAPM;AASP,OAAO,MAAMC,kBAAkB,GAAIL,MAAD,IAAY;AAC1C,SAAQC,QAAD,IAAc;AACjBpB,IAAAA,UAAU,CAACyB,aAAX,CAAyBN,MAAzB,EACKG,IADL,CACUI,QAAQ,IAAI;AACdN,MAAAA,QAAQ,CAACH,SAAS,CAACS,QAAQ,CAACH,IAAV,CAAV,CAAR;AACH,KAHL;AAIH,GALD;AAMH,CAPM;AASP,OAAO,MAAMI,iBAAiB,GAAIlB,MAAD,IAAY;AACzC,SAAQW,QAAD,IAAc;AACjBpB,IAAAA,UAAU,CAAC4B,YAAX,CAAwBnB,MAAxB,EACKa,IADL,CACUI,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACH,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAChCT,QAAAA,QAAQ,CAACH,SAAS,CAACR,MAAD,CAAV,CAAR;AACH;AACJ,KALL;AAMH,GAPD;AAQH,CATM","sourcesContent":["\nimport { usersAPI, profileAPI } from '../api/api';\nconst ADD_MESSAGE_PROFILE = 'ADD-MESSAGE-PROFILE';\nconst SET_PROFILE_USER = 'SET-PROFILE-USER';\nconst SET_STATUS = 'SET-STATUS';\n\nconst initialState = {\n    postData: [\n        { desc: 'Yo Yo mushiki', likesCounter: 23 },\n        { desc: 'It\\'s second first', likesCounter: 5 }\n    ],\n    profile: null,\n    status: ''\n}\n\nconst profileReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case ADD_MESSAGE_PROFILE: {\n            return {\n                ...state,\n                postData: [...state.postData, { desc: action.message, likesCounter: 12 }],\n            }\n        }\n\n        case SET_PROFILE_USER: {\n            return {\n                ...state,\n                profile: action.profile\n            }\n        }\n\n        case SET_STATUS: {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n\n        default:\n            return state\n    }\n}\n\nexport default profileReducer;\n\nexport const addMessage = (message) => {\n    return {\n        type: ADD_MESSAGE_PROFILE,\n        message: message\n    }\n}\n\nexport const setProfileUser = (profile) => {\n    return {\n        type: SET_PROFILE_USER,\n        profile\n    }\n}\n\nexport const setStatus = (status) => {\n    return {\n        type: SET_STATUS,\n        status\n    }\n}\n\nexport const getProfileThunk = (userId) => {\n    return (dispatch) => {\n        usersAPI.getProfile(userId)\n            .then(data => {\n                dispatch(setProfileUser(data))\n            })\n    }\n}\n\nexport const getUserStatusThunk = (userId) => {\n    return (dispatch) => {\n        profileAPI.getUserStatus(userId)\n            .then(response => {\n                dispatch(setStatus(response.data))\n            })\n    }\n}\n\nexport const updateStatusThunk = (status) => {\n    return (dispatch) => {\n        profileAPI.updateStatus(status)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(setStatus(status))\n                }\n            })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}